【メモ】

JavaScriptの reduce() メソッドは、配列のすべての要素に対して指定したリデューサー関数を適用し、単一の出力値を生成します。リデューサー関数は、前回の呼び出しの結果と配列の次の要素を受け取り、新しい結果を返します。これは、配列の値を「集約」または「リデュース」するのに便利な方法です。

以下は、 reduce() メソッドの基本的な使用法です：

javascript
Copy code
let numbers = [1, 2, 3, 4, 5];

let sum = numbers.reduce(function(accumulator, currentValue) {
  return accumulator + currentValue;
}, 0);

console.log(sum);  // Output: 15
この例では、 reduce() メソッドは配列 numbers の各要素に対して関数を実行します。この関数は2つの引数を取ります：

accumulator - 前回の呼び出しの結果。初期値は reduce() メソッドの2つ目の引数で設定され、上記の例では 0 に設定されています。
currentValue - 処理対象の配列の現在の要素。
関数の内部では、 accumulator と currentValue の和を返しています。これにより、配列のすべての要素が合計され、結果の sum （この例では 15）が得られます。

reduce() メソッドは、合計や積を計算したり、配列を新しい形式に変換したりするのに非常に強力なツールです。

===================================

array.splice(start, n, e1, e2, ...) (N4)
0 から数えて、start 番目から n 個の要素を削除し、その代わりに e1, e2, ...を値とする要素を埋め込みます。

var arr = ["A", "B", "C", "D", "E", "F", "G"];
arr.splice(2, 3, "X", "Y", "Z");
console.log(arr);              // => ["A", "B", "X", "Y", "Z", "F", "G"]















