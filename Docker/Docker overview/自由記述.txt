【メモ】

★Docker platform
DOCKERはコンテナと呼ばれる隔離された環境でアプリケーションをパッケージ化する機能を提供する。
コンテナは軽量で、アプリケーションの実行に必要なものがすべて含まれている。作業中にコンテナを簡単に
共有することができ、全員が同じ方法で動作する。

★Docker architecture
クライアント・サーバ・アーキテクチャを採用しているDOCKER。クライアントはDOCKERデーモンと対話し、
コンテナのビルド、実行、配布を行う。クライアントをリモートのDOCKERデーモンに接続することもできる。

★Docker daemon
Dockerデーモン（dockerd）はDocker APIリクエストをリッスンし、イメージ、コンテナ、ネットワーク、
ボリュームなどのDockerオブジェクトを管理する。デーモンは他のデーモンと通信してDockerサービスを
管理することもできる。

★Docker client
Dockerクライアント（docker）は、多くのDockerユーザがDockerとやりとりする主要な方法である。
docker runなどのコマンドを使用すると、クライアントはこれらのコマンドをdockerdに送信し、dockerdが
コマンドを実行する。dockerコマンドはDocker APIを使用する。Dockerクライアントは複数のデーモンと通信できる。

★Docker registries
DockerレジストリはDockerイメージを保存する。Docker Hubは誰でも使えるパブリックレジストリで、Dockerは
デフォルトでDocker Hub上のイメージを探すように設定されている。自分専用のレジストリを運用することもできる。
docker pullコマンドやdocker runコマンドを使うと、設定したレジストリから必要なイメージがプルされる。
docker pushコマンドを使うと、設定したレジストリにイメージがプッシュされます。

★Images
イメージとは、DOCKERコンテナを作成するための手順が書かれた読み取り専用のテンプレート。多くの場合、
イメージは他のイメージをベースにしてさらにカスタマイズを加えたもの。他人が作成しレジストリで公開されている
イメージのみを使用することもできる。

★Containers
コンテナはイメージの実行可能なインスタンス。DOCKER APIまたはCLIを使用してコンテナを作成、開始、停止、
移動、または削除できる。コンテナが削除されると、永続ストレージに保存されていない状態の変更はすべて消える。











